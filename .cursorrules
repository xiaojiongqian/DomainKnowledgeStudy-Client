# DomainKnowledgeStudy-Client - Cursor AI 规则

## 项目概述
DomainKnowledgeStudy-Client 是一个针对领域知识库的学习、出题和考核 web 系统，主要特点包括：
1. 对接 LLM-RAG 系统，通过基于 JSON 的 API 实现内容生成与处理。
2. 学习模块：基于知识库生成学习大纲，并在交互式问答界面中提供知识点按钮，方便学员学习。
3. 出题模块：依据知识库自动生成题目（附答案及题目内容分析），题目确认后导入题库；支持选择题与问答题，按知识点分类确保均衡。
4. 出题配置界面：支持批量自动生成考题及内容的增删改。
5. 考核模块：从题库中随机抽题，选择题自动批改，问答题由 LLM 系统批改，考核结果记录历史成绩。
6. 考核完成后，学员可查看批改结果（包括正确答案与 LLM 给出的问答题答案评论），以便于学习提升。
7. 考核配置界面：可配置出题数量、知识点覆盖率、重点知识点及通过标准。

## 项目背景
本文件定义了 Cursor AI 在处理 DomainKnowledgeStudy-Client 时应遵循的规则和指南。

### 技术栈
- Platform: web
- Framework: vue
- 关键依赖：
  - pinia
  - vue-router

## 代码生成规则

### 1. 项目结构
- 遵循既定项目结构
- 组件须放置于适当目录
- 遵循文件命名规则
- 保持模块边界清晰
- 将相关文件归类存放

### 2. 代码风格
- 保持一致缩进和行长度
- 合理使用间距与括号
- 遵循一致的命名规范
- 严格遵循 TypeScript 最佳实践
- Vue 风格指南
 * 组件名称使用多个单词命名（PascalCase）。
 * 组件的 data 选项必须是返回对象的函数。
 * 明确定义 Prop 类型及默认值。
 * v-for 必须设置唯一的 key。
 * 避免同元素同时使用 v-if 和 v-for。
 * 组件样式使用局部作用域（scoped或CSS Modules）。
 * 单文件组件使用统一的文件名风格（PascalCase 或 kebab-case）。
 * 基础组件使用统一前缀（如Base）。
 * 紧密耦合的子组件以父组件名为前缀。
 * 组件名命名顺序为“通用→具体”。
 * 无内容组件标签自闭合。
 * 模板中组件名使用 PascalCase 或 kebab-case。
 * 组件定义名统一使用 PascalCase。
 * Prop 名 JS 中用 camelCase，模板中用 kebab-case。
 * 模板多属性时每个属性独占一行。
 * 插值或指令表达式尽量简单，复杂逻辑提取计算属性。
 * 计算属性逻辑单一明确。
 * 静态属性值总是加引号。
 * 模板指令使用缩写（如:、@、#）。
 * 使用组合式 API（<script setup>）。
 * 单文件组件顺序为 <script> → <template> → <style>。
- JavaScript 风格（Airbnb）
 * 禁用var，使用const或let。
 * 每条语句结尾加分号。
 * 使用严格相等（===、!==）。
 * 禁止使用eval和with。
 * 禁止提交代码中的调试语句（如console.log）。
 * 变量、函数用 camelCase，类名用 PascalCase，常量用全大写加下划线。
 * 字符串统一使用单引号。
 * 对象/数组末尾元素后加逗号（拖尾逗号）。
 * 使用模板字符串（`${}`）拼接字符串。
 * 优先使用解构赋值。
 * 回调函数优先使用箭头函数。
 * 函数默认参数使用 ES6 默认值语法。
- TypeScript 风格（typescript-eslint）
 * 避免使用any类型，尽量使用unknown或其他明确类型。
 * 不使用namespace组织代码，采用 ES Module。  
 * 接口和类型使用 PascalCase，禁止I前缀。
 * 类和接口明确标注成员可见性（public/private/protected）。
 * 对象类型优先使用接口定义，类型别名作补充。
 * 导出的函数、方法显式标注返回类型。
 * 类型断言统一用as语法。
 * 合理使用readonly声明只读属性。
 * 避免使用@ts-ignore，必要时用@ts-expect-error并注明原因。
- ESLint 规则（eslint-plugin-vue）
 * vue/multi-word-component-names（组件名必须多个单词）。
 * vue/require-prop-types（强制定义 Prop 类型）。
 * vue/require-v-for-key（强制为 v-for 设置 key）。
 * vue/require-v-for-key（强制为 v-for 设置 key）。
 * vue/no-use-v-if-with-v-for（禁止同时使用 v-if 和 v-for）。
 * vue/one-component-per-file（单文件只允许一个组件）。
 * vue/attribute-hyphenation（模板组件属性使用 kebab-case）。
 * vue/v-on-event-hyphenation（事件名使用 kebab-case）。
 * vue/require-default-prop（非必需 Prop 需定义默认值）。
 * vue/require-explicit-emits（显式声明 emits）。
 * vue/no-deprecated-*（禁止废弃 API）。
 * vue/no-unused-components（去除未用组件）。
 * vue/no-unused-vars（去除未用变量）。
 * vue/no-arrow-functions-in-watch（watch禁止箭头函数）。
 * vue/no-async-in-computed-properties（禁止计算属性异步操作）。
 * vue/no-template-shadow（模板变量禁止遮蔽父作用域）。
 * vue/no-unresolved-f-string（禁止未解析的模板字符串）。
 * vue/no-v-html（禁止使用v-html）。
 * vue/no-v-text-v-html-same-element（禁止使用v-text和v-html）。
- Prettier 格式规则
 * 统一使用 2 个空格缩进。
 * 每条语句结尾自动加分号。
 * 字符串统一单引号，JSX/HTML 属性用双引号。
 * 对象/数组末尾元素后加逗号（trailingComma: es5）。
 * 箭头函数参数始终加括号（arrowParens: always）。
 * 对象大括号内侧保留空格。 
 * 每行最大长度限制为 100 个字符。
 * 文件末尾保留一个空行。
 * HTML/Vue 模板中多行标签右尖括号>独占一行。
 * 启用 Prettier 后禁用与其冲突的 ESLint 规则。

### 3. UI设计标准
- 遵循 Material Design 设计规范 https://m3.material.io/  
- 遵循 Tailwind CSS 设计规范 https://tailwindcss.com/  

### 4. 组件生成指南
- 采用组件组合模式
- 定义正确的 props 类型
- 使用合适的状态管理方案
- 实现有效错误处理
- 正确处理事件
- 遵循生命周期最佳实践
- 优化渲染性能

### 5. 类型系统
- 开启严格类型检查
- 正确定义 interfaces
- 正确使用泛型（generics）
- 合理处理 null/undefined
- 使用 type guards
- 对复杂类型进行文档说明
- 避免 any 类型

### 6. API 集成
- 遵循 RESTful 规范
- 实现完善错误处理
- 使用类型安全请求
- 处理好认证问题
- 验证 API 响应
- 完善 API 使用文档
- 实施有效缓存策略

### 7. 测试要求
- 测试规范, 遵循 Vue Test Utils 要求 https://test-utils.vuejs.org/   
- 单元测试要求，覆盖率90%以上，在提交代码前，需要运行 `npm run test:unit` 检查单元测试覆盖率
- 接口测试要求，覆盖率100%，在提交代码前，需要运行 `npm run test:api` 检查接口测试覆盖率
- 编写全面单元测试
- 实现集成测试
- 遵循测试最佳实践
- 正确使用模拟数据
- 覆盖错误场景
- 保持高测试覆盖率
- 记录测试案例

### 8. 安全指南
- 验证所有输入
- 对数据输出进行消毒
- 正确处理认证问题
- 保护敏感数据
- 遵循 OWASP 指南
- 正确配置 CORS
- 使用安全依赖

### 9. 性能规则
- 实现代码分割
- 使用 Lazy Loading
- 优化 Bundle 大小
- 减少不必要的重渲染
- 实施有效缓存策略
- 优化资源加载
- 遵循性能最佳实践

### 10. 文档要求
- 文档需清晰、简洁
- 包含 JSDoc 注释
- 提供使用示例
- 文档化边界情况
- 解释复杂逻辑
- 包含类型信息
- 遵循文档标准

## 最佳实践

### 1. 代码质量
- 保持函数小而专注
- 遵循 DRY 原则
- 关注点分离
- 使用有意义的命名
- 编写自说明代码
- 合理处理错误
- 编写易维护代码

### 2. 性能优化
- 优化 Bundle 大小
- 实现代码分割
- 采用合适缓存策略
- 优化渲染流程
- 遵循 Lazy Loading 模式
- 内存管理
- 状态管理
- 渲染优化
- 资源优化

### 3. 安全性
- 验证用户输入
- 对输出数据消毒
- 正确实施认证机制
- 保护敏感数据
- 遵循安全最佳实践S